const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

module.exports = contact_row

async function contact_row (opts = {}) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb
  
  const on = {
    style: inject,
    data: ondata,
    icons: iconject,

  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  shadow.innerHTML = `
    <div class="contact-row"></div>
    <style></style>
  `
  const style = shadow.querySelector('style')
  const row = shadow.querySelector('.contact-row')
  
  
  let dricons = []
  await sdb.watch(onbatch)

  return el

  function fail(data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }

  async function onbatch (batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(
        paths.map(path => drive.get(path).then(file => file.raw))
      )
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject (data) {
    style.textContent = data[0]
  }

  async function ondata (data) {
    const { avatar, name, message, time, unread, online, lightining } = data[0]
    row.innerHTML = `
    <div class="contact-left">
        <div class="contact-avatar">
          <img src="${avatar}" alt="avatar" />
          ${online ? '<div class="online-dot"></div>' : ''}
        </div>
        <div class="contact-info">
          <div class="contact-name">${name}</div>
          <div class="contact-message ${unread > 0 ? 'unread-message' : ''}">${message}</div>       
      </div>
      </div>
      <div class="contact-right">
        <div class="contact-time">${time}</div>
        <div class="icon-wrapper  ${!lightining ? 'no-lightning' : ''}">
          ${lightining ? dricons[0]: ' '}
          ${unread > 0 ? `<div class="unread-badge">${unread}</div>` : ''}
        </div>
      </div>` 
  }

   function iconject (data) {
    dricons = data
  }
}


function fallback_module () {
  return {
    api: fallback_instance,
  }
  function fallback_instance (opts) {
    return {
        drive: {
          'icons/': {
            'lightning.svg': {
              '$ref': 'lightning.svg'
            },
          },
          'style/':{
            'style.css':{
              raw:  `
                .contact-row {
                  display: flex;
                  justify-content: space-between;
                  align-items: center;
                  padding: 12px 0px;
                  font-family: Arial, sans-serif;
                  color: black;
                  width: 100%;
                  box-sizing: border-box;
                  cursor: pointer;
                }

                .contact-left {
                  display: flex;
                  align-items: center;
                  gap: 12px;
                }

                .contact-avatar {
                  position: relative;
                  width: 50px;
                  height: 50px;
                  flex-shrink: 0;
                }

                .contact-avatar img {
                  width: 100%;
                  height: 100%;
                  border-radius: 50%;
                  object-fit: cover;
                  border: 1px solid #ccc;

                }

                .online-dot {
                  position: absolute;
                  bottom: 2px;
                  right: 2px;
                  width: 12px;
                  height: 12px;
                  background-color: #00c853; /* green */
                  border: 2px solid white;
                  border-radius: 50%;
                }

                .contact-info {
                  display: flex;
                  flex-direction: column;
                  justify-content: center;
                }

                .contact-name {
                  font-size: 20px;
                  color: #222;
                  line-height: 1.4;
                  
                }

                .contact-message {
                  font-size: 15px;
                  font-weight: normal; /* Default if no unread */
                  white-space: nowrap;
                  overflow: hidden;
                  text-overflow: ellipsis;
                  max-width: 180px;
                  display: inline-block;
                }

                .contact-message.unread-message {
                  font-weight: 550;
                }

                .contact-right {
                  display: flex;
                  flex-direction: column;
                  align-items: flex-end;
                  justify-content: center;
                  gap: 6px;
                }

                .contact-time {
                  font-size: 16px;
                  color: #888;
                }

                .icon-wrapper {
                  position: relative;
                  width: 20px;
                  height: 20px;
                  padding-right: 8px;

                }
                  
                .bolt-icon {
                  width: 100%;
                  height: 100%;
                  display: block;
                }

                .unread-badge {
                  position: absolute;
                  top: -6px;
                  right: -10px;
                  width: 10px;
                  height: 10px;
                  background-color: #FF4343;
                  color: white;
                  font-size: 12px;
                  font-weight: bold;
                  border-radius: 50%;
                  padding: 5px 5px;
                  text-align: center;
                  line-height: 1;
                  border: 2px solid white;
                  border-radius: 50%;
                }

                .icon-wrapper.no-lightning .unread-badge {
                  position: static;
                }
            `
            }
          },
          'data/': {
            'opts.json': {
              raw: opts
            }
          }
        }
    }
  }
}
