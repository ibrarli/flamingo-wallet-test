const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

module.exports = search_bar

async function search_bar (opts = {}) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb

  const on = {
    style: inject,
    data: ondata,
    icons: iconject,
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  let dricons = []

  shadow.innerHTML = `
  <div class="search-bar">
    <input
      type="text"
      class="search-input"
      placeholder="Search"
      style="border: none; outline: none; font-size: 14px; background: transparent; flex: 1;"
    />
    <div class="search-icon">
      <div class="icon-slot"></div>
    </div>
    <style></style>
  `
  const style = shadow.querySelector('style')
  const row = shadow.querySelector('.search-bar')

  await sdb.watch(onbatch)

  return el

  function fail(data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }

  async function onbatch (batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(
        paths.map(path => drive.get(path).then(file => file.raw))
      )
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject (data) {
    style.textContent = data[0]
  }

  async function ondata (data) {
  }

  function iconject (data) {
    dricons = data
    const icon_slot = shadow.querySelector('.icon-slot')
    if (icon_slot && dricons[0]) {
      icon_slot.innerHTML = dricons[0]
    }
  }
}

function fallback_module () {
  return {
    api: fallback_instance
  }
  function fallback_instance (opts) {
    return {
        drive: {
          'icons/':{
            'search.svg':{
              '$ref': 'search.svg'
            }
          },
          'style/':{
            'style.css':{
              raw: `
              .search-bar {
                display: flex;
                align-items: center;  
                justify-content: center; 
                margin-top: 15px;
                width: 330px;
                border: 1px solid gray;
                height: 50px;
                border-radius: 12px;
                margin-bottom: 16px;
              }

              .search-input {
                flex: 1;
                padding: 12px;
                font-size: 16px;
                color: #555;
              }
              .search-icon {
                padding: 8px;
                display: flex;
                align-items: center;
                justify-content: center;
                cursor: pointer;
              }
              `
            }
          },
          'data/': {
            'opts.json': {
              raw: opts
            }
          }
        }
    }
  }
}
