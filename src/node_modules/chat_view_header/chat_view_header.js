const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

module.exports = chat_view_header

async function chat_view_header (opts = {}) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb
  
  const on = {
    style: inject,
    data: ondata,
    icons: iconject,

  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  shadow.innerHTML = `
    <div class="chat_view_header"></div>
    <style></style>
  `
  const style = shadow.querySelector('style')
  const row = shadow.querySelector('.chat_view_header')
  
  
  let dricons = []
  await sdb.watch(onbatch)

  return el

  function fail(data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }

  async function onbatch (batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(
        paths.map(path => drive.get(path).then(file => file.raw))
      )
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject (data) {
    style.textContent = data[0]
  }

  async function ondata(data) {
  const { avatar, name, code } = data[0]
  row.innerHTML = `
    <div class="container-view-header">
      <div class="container-left">
        <div class="left-icon">
          ${dricons[0] || ''}
        </div>

        <div class="contact-heading">
          <div class="contact-avatar">
            <img src="${avatar}" alt="avatar" />
          </div>
          <div class="contact-info">
            <div class="contact-name">${name}</div>
            <div class="contact-code">${code}</div>
          </div>
        </div>
      </div>
      <div class="right-icon">
        ${dricons[1] || ''}
      </div>
    </div>
  `
}

   function iconject (data) {
    dricons = data
  }
}


function fallback_module () {
  return {
    api: fallback_instance,
  }
  function fallback_instance (opts) {
    return {
        drive: {
          'icons/': {
            'left-arrow.svg': {
              '$ref': 'left-arrow.svg'
            },
            'three-dot.svg':{
              '$ref': 'three-dot.svg'
            }
          },
          'style/':{
            'style.css':{
              raw:  `
              .container-view-header {
                display: flex;
                align-items: center;
                justify-content: space-between;
              }

              .container-left {
                display: flex;
                align-items: center;
                gap: 12px;
              }

              .left-icon,
              .right-icon {
                cursor: pointer;
              }

              .contact-heading {
                display: flex;
                align-items: center;
                gap: 10px;
              }

              .contact-avatar {
                width: 45px;
                height: 45px;
                border-radius: 50%;
                overflow: hidden;
                flex-shrink: 0;
              }

              .contact-avatar img {
                width: 100%;
                height: 100%;
                object-fit: cover;
                border-radius: 50%;
                border: 1px solid #ccc;
              }

              .contact-info {
                display: flex;
                flex-direction: column;
                justify-content: center;
              }

              .contact-name {
                font-size: 18px;
                 color: #222;
              }

              .contact-code {
                font-size: 14px;
                color: #666;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
                max-width: 160px;
              }
              `
            }
          },
          'data/': {
            'opts.json': {
              raw: opts
            }
          }
        }
    }
  }
}
