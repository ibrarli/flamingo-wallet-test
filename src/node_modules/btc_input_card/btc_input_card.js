const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)


async function get_rate(from = 'btc', to = 'usd') {
  let cached_rate = null
  if (cached_rate) return cached_rate
  
  const rate = Number(await (await fetch(`https://api.price2sheet.com/raw/${from}/${to}`)).text())

  if (!isNaN(rate) && rate > 0) {
    cached_rate = rate
    console.log("api is working")
  } else {
    console.log("api is returning null value")
  }

  return cached_rate
}

module.exports = btc_input_card

async function btc_input_card (opts = {}) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb
  
  const on = {
    style: inject,
    data: ondata,
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  shadow.innerHTML = `
    <div class="btc-card"></div>
    <style></style>
  `
  const style = shadow.querySelector('style')
  const container = shadow.querySelector('.btc-card')
  
  await sdb.watch(onbatch)

  return el

  function fail(data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }

  async function onbatch (batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(
        paths.map(path => drive.get(path).then(file => file.raw))
      )
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject (data) {
    style.textContent = data[0]
  }

  async function ondata (data) {
    let {
      currency = "BTC",
      amount = 0.0000,
      usdValue: usd_value = 0,
      balance = 0, 
      show_balance = true
    } = data[0]

    const EXCHANGE_RATE = await get_rate('btc', 'usd')

    container.innerHTML = `
      <div class="header">
        <span class="toggle ${currency === 'BTC' ? 'active' : ''}" data-currency="BTC">BTC</span>
        <span class="toggle ${currency === 'USD' ? 'active' : ''}" data-currency="USD">USD</span>
      </div>

      <div class="main-area"> 
        <div class="amount-row">
          <input type="number" min="0" step="0.0001" value="${currency === 'BTC' ? amount : usd_value}" class="amount-input" />
          <div class="actions">
            <button class="close-btn">âœ•</button>
            <button class="btn half-btn">Half</button>
            <button class="btn all-btn">All</button>
          </div>
        </div>
        <div class="error"></div>
        ${show_balance ? `<div class="balance">Balance ${balance} BTC</div>` : ""}
        <div class="usd-text">
          You are sending 
          <strong>
            ${currency === 'BTC' ? `USD ${(amount * EXCHANGE_RATE).toFixed(2)}` : `${(usd_value / EXCHANGE_RATE).toFixed(4)} BTC`}
          </strong>
        </div>
      </div>
    `

    const amount_input = container.querySelector('.amount-input')
    const half_btn = container.querySelector('.half-btn')
    const all_btn = container.querySelector('.all-btn')
    const btc_toggle = container.querySelector('[data-currency="BTC"]')
    const usd_toggle = container.querySelector('[data-currency="USD"]')
    const usd_text = container.querySelector('.usd-text strong')
    const close_btn = container.querySelector('.close-btn')
    const error_div = container.querySelector('.error')
    const toggles = container.querySelectorAll('.toggle')
    
    function showError(msg) {
      if (msg) {
        error_div.innerHTML = `<div class="divider"></div>${msg}`
      } else {
        error_div.innerHTML = ""
      }
    }

    function update_values(newAmountBTC) {
      amount = parseFloat(newAmountBTC) || 0
      usd_value = (amount * EXCHANGE_RATE).toFixed(2)
      if (amount > balance) {
        showError("Insufficient balance, please add funds to your account")
      } else {
        showError("")
      }
    }

    function update_display(value, curr) {
      amount_input.value = value
      usd_text.textContent = curr === 'BTC'
        ? `USD ${usd_value}`
        : `${amount} BTC`

      toggles.forEach(t => t.classList.remove('active'))
      if (curr === 'BTC') {
        btc_toggle.classList.add('active')
      } else {
        usd_toggle.classList.add('active')
      }
    }

    function on_toggle_btc() {
      currency = 'BTC'
      update_display(amount, currency)
    }

    function on_toggle_usd() {
      currency = 'USD'
      update_display(usd_value, currency)
    }

    function on_half_click() {
      amount = balance / 2
      usd_value = (amount * EXCHANGE_RATE).toFixed(2)
      update_display(currency === 'BTC' ? amount : usd_value, currency)
      showError("")
    }

    function on_all_click() {
      amount = balance
      usd_value = (amount * EXCHANGE_RATE).toFixed(2)
      update_display(currency === 'BTC' ? amount : usd_value, currency)
      showError("")
    }

    function on_close_click() {
      amount = 0
      usd_value = 0
      update_display(currency === 'BTC' ? amount : usd_value, currency)
      showError("")
    }

    function on_amount_input() {
      let val = amount_input.value;

      if (val < 0) val = '';

      if (val === "" || isNaN(val)) {
        val = "0";
      }

      if (val.includes('.')) {
        let [int_part, dec_part] = val.split('.');
        if (currency === 'BTC') {
          int_part = int_part.slice(0, 5); // Limited to 99,999 BTC
          dec_part = dec_part.slice(0, 8);  // Lowest denomination is 0.00000001 BTC
        } else {
          int_part = int_part.slice(0, 10); // Limited to 1 billion USD
          dec_part = dec_part.slice(0, 1); // Lowest denomination is 0.1 USD
        }
        val = int_part + (dec_part ? '.' + dec_part : '');
      }else {
        if (currency === 'BTC') {
          val = val.slice(0, 5);
        } else {
          val = val.slice(0, 10);
        }
      }

      if (currency === 'BTC') {
        amount = parseFloat(val) || 0;
        usd_value = (amount * EXCHANGE_RATE).toFixed(2);
      } else {
        usd_value = parseFloat(val) || 0;
        amount = +(usd_value / EXCHANGE_RATE).toFixed(8); 
      }

      if (amount > balance) {
        showError("Insufficient balance, please add funds to your account");
      } else {
        showError("");
      }

      usd_text.textContent = currency === 'BTC'
        ? `USD ${usd_value}`
        : `${amount.toFixed(8)} BTC`;
    }

    btc_toggle.onclick = on_toggle_btc
    usd_toggle.onclick = on_toggle_usd
    half_btn.onclick = on_half_click
    all_btn.onclick = on_all_click
    close_btn.onclick = on_close_click
    amount_input.oninput = on_amount_input 
  }
}

function fallback_module () {
  return {
    api: fallback_instance,
  }
  function fallback_instance (opts) {
    return {
      drive: {
        'style/': {
          'style.css': {
            raw: `
              .btc-card {
                background: #f9f9f9;
                border: 1px solid #ccc;
                border-radius: 8px;
                padding: 16px;
                width: 100%;
                box-sizing: border-box;
                margin-top: 15px;
                margin-bottom: 30px;
              }

              .header {
                display: flex;
                gap: 10px;
                font-size: 14px;
                font-weight: bold;
                margin-bottom: 10px;
              }

              .toggle {
                cursor: pointer;
                color: #888;
                padding-bottom: 2px;
              }

              .toggle.active {
                color: #000;
                border-bottom: 2px solid #000;
              }

              .main-area{
                display: flex;
                flex-direction: column;
                justify-content: space-between;
                min-height: 110px;              
              }
              
              .amount-row {
                display: flex;
                align-items: center;
                justify-content: space-between;
                margin-bottom: 6px;
                gap: 6px;
              }

              .amount-input {
                font-size: 30px;
                font-weight: 500;
                flex: 1;
                text-align: left;
                border: none;
                outline: none;
                background: transparent;
                min-width: 0; 
              }

              .actions {
                display: flex;
                gap: 6px;
                align-items: center;
                flex-shrink: 0;
              }

              .btn {
                border: none;
                background: #000;
                color: #fff;
                padding: 3px 8px;
                font-size: 12px;
                cursor: pointer;
                border-radius: 3px;
              }

              .close-btn {
                background: #000;
                border: none;
                color: #fff;
                font-size: 12px;
                cursor: pointer;
                width: 20px;
                height: 20px;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                padding: 0;
              }

              .divider {
                width: 100%;
                height: 1px;
                background-color: #000; 
                margin: 2px 0; 
              }

              .error {
                color: #666; /* same as balance text */
                font-size: 13px;
                padding-block: 6px;
              }

              .balance {
                font-size: 12px;
                color: #666;
                padding-bottom:10px;
              }
          
              .usd-text {
                font-size: 14px;
                margin-top: auto;
              }
            `
          }
        },
        'data/': {
          'opts.json': {
            raw: opts
          },
        }
      }
    }
  }
}
