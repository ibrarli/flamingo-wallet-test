const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

module.exports = input_field

async function input_field (opts = {}) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb
  
  let dricons = [] // store icons globally for component

  const on = {
    style: inject,
    data: ondata,
    icons: iconject,
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  shadow.innerHTML = `
    <div class="input-field-container"></div>
    <style></style>
  `
  const style = shadow.querySelector('style')
  const container = shadow.querySelector('.input-field-container')
  
  await sdb.watch(onbatch)

  return el

  function fail(data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }

  async function onbatch (batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(
        paths.map(path => drive.get(path).then(file => file.raw))
      )
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject (data) {
    style.textContent = data[0]
  }

  function iconject(data) {
    dricons = data 
  }

async function ondata (data) {
  const { header, placeholder, address, icon } = data[0]

  container.innerHTML = `
      <div class="contact-header">${header}</div>
      <div class="input-field">
        <input
          type="text"
          class="search-input"
          placeholder="${placeholder}"
        />
         ${icon 
          ? `<span class="icon">${dricons[0] || ""}</span>` 
          : ''}
      </div>
    ` 
  
  const input = container.querySelector('.search-input')
  const copy_icon = container.querySelector('.icon')

  if (copy_icon) {
    copy_icon.onclick = async () => {
      try {
        if (!input.value && address) input.value = address;

        const textToCopy = input.value;
        if (!textToCopy) return;

        if (navigator.clipboard && navigator.clipboard.writeText) {
          await navigator.clipboard.writeText(textToCopy);
          console.log("Copied via navigator.clipboard:", textToCopy);
        } else {
          const textarea = document.createElement("textarea");
          textarea.value = textToCopy;
          document.body.appendChild(textarea);
          textarea.select();
          document.execCommand("copy");
          document.body.removeChild(textarea);
          console.log("Copied via execCommand fallback:", textToCopy);
        }

      } catch (err) {
        console.error("Failed to copy:", err);
      }
    };
  }
}



}

function fallback_module () {
  return {
    api: fallback_instance,
  }
  function fallback_instance (opts) {
    return {
      drive: {
        'icons/': {
          'copy.svg': { '$ref': 'copy.svg' },
        },
        'style/': {
          'style.css': {
            raw: `
              .contact-header {
                font-size: 16px;
                color: #666;
                margin-bottom: 8px;
              }

              .input-field {
                width: 100%;
                display: flex;
                align-items: center;
                gap: 8px;
                border: 1px solid #ccc; 
                border-radius: 6px; 
                background-color: #f7f7f7ff; 
              }

              .input-icon {
                width: 20px;
                height: 20px;
                cursor: pointer;
              }

              .search-input {
                flex: 1;
                padding: 15px 12px;
                font-size: 18px;
                outline: none;
                border: 0;
                background-color: #f7f7f7ff; 
                border-radius: 6px; 
                transition: all 0.3s ease;
              }

              .search-input::placeholder {
                color: #555; 
              }

              .search-input:hover {
                background-color: #eeeeee; 
              }

              .search-input:focus {
                border-color: #666;
                background-color: #ffffff; 
              }
              
              .icon{
                padding: 5px;
                cursor: pointer;
              }
            `
          }
        },
        'data/': {
          'opts.json': {
            raw: opts
          },
        }
      }
    }
  }
}
