const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

module.exports = general_button

async function general_button (opts = {}, protocol) {
  const { id, sdb } = await get(opts.sid)

  const {drive} = sdb

  const on = {
    style: inject,
    data: ondata
  }

  const el = document.createElement('div')
  const shadow =  el.attachShadow({ mode: 'closed' })

  shadow.innerHTML = `
    <div class="general-button-container">
      <button class="general-button" type="button">
        <span class="button-text">Button</span>
      </button>
    </div>
    <style></style>
  `

  const style = shadow.querySelector('style')
  const button = shadow.querySelector('.general-button')

  let send_action = null
  if(protocol){
   send_action = protocol(msg=>on_message(msg))
  }

  // Set up click handler
  button.addEventListener('click', handleClick)

  await sdb.watch(onbatch)

  return el

  function fail(data, type) { throw new Error('invalid message', { cause: { data, type } }) }

  async function onbatch (batch) {
    for (const { type, paths } of batch){
      const data = await Promise.all(paths.map(path => drive.get(path).then(file => file.raw)))
      const func = on[type] || fail
      func(data, type)
    }
  }

  function inject (data) {
    style.replaceChildren((() => {
      return document.createElement('style').textContent = data[0]
    })())
  }

  function ondata(data) {
    const buttonData = data[0]?.value || {}
    const { name, action } = buttonData
    console.log(`name "${name}"`)
    updateButton(buttonData)
  }

  function on_message({type, data}) {
    if (type === 'button_name') {
      console.log(`Button "${data.name}", action "${data.action}"`)
      
      updateButton({
        name: data.name,
        action: data.action
      })
    }
  }


  function updateButton({ name = 'Button', disabled = false, action = null }) {
  const buttonTextEl = shadow.querySelector('.button-text')
  
  
  if (buttonTextEl) {
    buttonTextEl.textContent = name
  }

  if (button) {
    button.disabled = disabled
    button._action = action // Store action for use when clicked
  }
}


  function handleClick(event) {
    event.preventDefault()

    if(send_action && button._action){
      send_action({
        type: button._action,
        data: {
          text: shadow.querySelector('.button-text').textContent
        }
      })
    }
  }
}

// ============ Fallback Setup for STATE ============

function fallback_module () {
  return {
    api: fallback_instance
  }

  function fallback_instance (opts = {}) {
    return {
      drive: {
        'style/': {
          'general_button.css': {
           '$ref':'general_button.css'
          }
        },
        'data/': {
          'opts.json': {
            raw: opts
          }
        }
      }
    }
  }
}