const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

const search_bar = require('search_bar') 
const square_button = require('square_button') 
const contact_row = require('contact_row')


module.exports = contacts_list

async function contacts_list(opts = {}) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb

  const on = {
    style: inject,
    data: ondata
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  shadow.innerHTML = `
    <div class="component-label">Contacts List</div>
    <div class="contact-list-container">
      <div class="contact-list-header">Contacts</div>
      <div class="top-bar"></div>
    </div>
    <style></style>
  `

  const style = shadow.querySelector('style')
  const contact_list_container = shadow.querySelector('.contact-list-container')
  const top_bar = shadow.querySelector('.top-bar')

  const subs = await sdb.watch(onbatch)
  
  if (subs.length > 0) {
    const search = await search_bar(subs[0])
    const button = await square_button(subs[1])
    top_bar.append(search)
    top_bar.append(button)  
  }

  for (let i = 2; i < subs.length; i++) {
    console.log('contact row subs', subs[i])
    const contact = await contact_row(subs[i]) 
    contact_list_container.append(contact)
  }

  return el

  function fail(data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }

  async function onbatch(batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(paths.map(path => drive.get(path).then(file => file.raw)))
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject(data) {
    style.textContent = data[0]
  }

  async function ondata(data) {
  }
}

function fallback_module() {
  return {
    api,
    _: {
      'search_bar': { $: '' },
      'contact_row': { $: '' },
      'square_button': { $: '' }
    }
  }

  function api(opts) {
    const search_bar = {
      mapping: {
        style: 'style',
        data: 'data',
        icons: 'icons'
      },
      0: {
      }
    }

    const square_button = {
      mapping: {
        style: 'style',
        data: 'data',
        icons: 'icons'
      },
      1: {
      }
    }

    const contact_row = {
      mapping: {
        style: 'style',
        data: 'data',
        icons: 'icons'

      }
    }

    opts.value.forEach((contact, index) => {
      contact_row[index + 2] = contact
    })

    return {
      drive: {
        'style/': {
          'contacts_list.css': {
            '$ref': 'contacts_list.css'
          }
        },
        'data/': {
          'opts.json': {
            raw: opts
          }
        }
      },
      _: {
        search_bar,
        square_button,
        contact_row
      }
    }
  }
}
