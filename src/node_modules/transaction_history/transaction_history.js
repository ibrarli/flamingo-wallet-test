const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

const transaction_row = require('transaction_row')

module.exports = transaction_history

async function transaction_history (opts = {}) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb
  const on = {
    style: inject,
    data: ondata
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  shadow.innerHTML = `
    <div class="transaction-history-container">
      <div class="transaction-history-header"> Transactions History </div>
    </div>
    <style></style>
  `

  const style = shadow.querySelector('style')
  const containerEl = shadow.querySelector('.transaction-history-container')

  
  const subs = await sdb.watch(onbatch)
  

  const grouped = {}
  console.log("test",sdb)

  // for (const sub of subs) {

  //   const opts_file = await sdb.get(sub.sid)
  //   console.log("opts_file",opts_file)

  //   const tx = opts_file.raw || {}

  //   const date = (tx.date || sub.date || 'Unknown').trim() 

  //   if (!grouped[date]) grouped[date] = []
  //   grouped[date].push({tx, sub_drive})
  // }
  
  subs.forEach(sub => {
    const date = (sub.date || 'Unknown').trim() 
    if (!grouped[date]) grouped[date] = []
    grouped[date].push(sub)
  })
  
  for (const date in grouped) {
    const dateEl = document.createElement('div')
    dateEl.className = 'transaction-date'
    dateEl.innerHTML = `<span>${date}</span>`
    containerEl.appendChild(dateEl)

    for (const sub of grouped[date]) {
      const row = await transaction_row(sub)
      containerEl.appendChild(row)
    }
  }


  return el

  function fail(data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }

  async function onbatch (batch) {
    for (const { type, paths } of batch){
      const data = await Promise.all(paths.map(path => drive.get(path).then(file => file.raw)))
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject (data) {
    style.textContent = data[0]
  }

  async function ondata(data) {
  }
}


function fallback_module () {
  return {
    api,
    _: {
      'transaction_row':{
        $: ''
      }
    } 
  }
  function api(opts){
    const transaction_row = {
      mapping: {
        style: 'style',
        data: 'data'
      }
    }
    opts.value.forEach((transaction, index) => {
      transaction_row[index] = transaction
    })
    return {
      drive: {
        'style/': {
          'transaction_history.css':{
            '$ref': 'transaction_history.css'
          }
        },
        'data/': {
          'opts.json':{
            raw: opts
          }
        }
      },
      _:{
        transaction_row
      }
    }
  }
}
