const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

const { VanillaQR } = require("vanillaqr")

module.exports = qr_code

async function qr_code(opts = {}) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb


  const on = {
    style: inject,
    data: ondata
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  shadow.innerHTML = `
    <div class="qr-container"></div>
    <style></style>
  `

  const style = shadow.querySelector('style')
  const qr_container = shadow.querySelector('.qr-container')

  await sdb.watch(onbatch)

  return el

  function fail(data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }

  async function onbatch(batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(paths.map(path => drive.get(path).then(file => file.raw)))
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject(data) {
    style.textContent = data[0]
  }

  async function ondata(data) {
    const {address} = data[0]
    console.log('QR-Code address:', address)
    await render_qr_code(address)
  }

  async function render_qr_code(address) {
    

    const qr = new VanillaQR({
      url: address,
      size: 280,
      colorLight: '#ffffffff',
      ecclevel: 4,
      noBorder: true,
    })
    
    qr_container.appendChild(qr.toImage('png')) 
  }
}

function fallback_module() {
  return {
    api
  }

  function api(opts) {
    return {
      drive: {
        'style/': {
          'qr_code.css': {
            raw: ``
          }
        },
        'data/': {
          'opts.json': {
            raw: opts
          }
        }
      }
    }
  }
}
