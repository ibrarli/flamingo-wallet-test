const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

module.exports = switch_account

async function switch_account (opts = {}) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb

  const on = {
    style: inject,
    data: ondata,
    icons: iconject,
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  let dricons = []

  shadow.innerHTML = `
    <div class="switch-account-container"></div>
    <style></style>
  `
  const style = shadow.querySelector('style')
  const row = shadow.querySelector('.switch-account-container')

  await sdb.watch(onbatch)
  return el

  async function onbatch (batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(
        paths.map(path => drive.get(path).then(file => file.raw))
      )
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject (data) {
    style.textContent = data[0]
  }

  async function ondata (data) {
    const { btc, lightning } = data[0]

    row.innerHTML = `
      <div class="container-title">
        <div class="title">Switch Account</div>
        <div class="close-icon">${dricons[0]}</div>   
      </div>
      <div class="account-container">
        <div class="btc-icon">${dricons[1]}BTC</div>
        <div class="btc-amount">${parseFloat(btc).toFixed(4)}</div>       
      </div>
      <div class="account-container">
        <div class="lightning-icon">${dricons[2]}Lightning</div>
        <div class="lightning-amount">${parseFloat(lightning).toFixed(4)}</div>       
      </div>
    ` 

    const closeBtn = row.querySelector('.close-icon')
    if (closeBtn) {
      closeBtn.onclick = () => {
        const dropdown = el.parentNode
        if (dropdown) {
          dropdown.classList.add('hidden')   
        }
      }
    }
  }


  function fail (data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }

  function iconject (data) {
    dricons = data
  }

}

function fallback_module () {
  return {
    api: fallback_instance
  }

  function fallback_instance (opts) {
    return {
      drive: {
        'icons/': {
          'x.svg':{
            '$ref': 'x.svg'
          },
          'btc.svg': {
            '$ref': 'btc.svg'
          },
          'lightning.svg': {
            '$ref': 'lightning.svg'
          },
        },
        'style/': {
          'style.css': {
            raw: `
              .switch-account-container {
                border: 1px solid #ccc;
                border-radius: 10px;
                padding: 16px;
                width: 250px;
                background: white;
                font-family: Arial, sans-serif;
                color: black;
                box-shadow: 0 6px 18px rgba(0, 0, 0, 0.20);
              }

              .container-title{
                display: flex;
                justify-content: space-between;
                margin-bottom: 20px;
              }

              .container-title svg{
                width: 25px;
                height: 25px;
              }

              .title{
                font-size: 24px;
              }

              .account-container {
                display: flex;
                justify-content: space-between;
                align-items: center;
                font-size: 16px;
                padding-inline: 10px;
                gap: 8px;
                padding-block: 20px;
                border-radius: 8px; /* Optional: for smooth edges */
                transition: background-color 0.3s ease, box-shadow 0.3s ease, transform 0.2s ease;
              }

              .account-container:hover {
                background-color: #f0f0f0ff;
                box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
                transform: translateY(-2px);
                cursor: pointer;
              }

              .btc-icon,
              .lightning-icon {
                display: inline-flex;
                align-items: center;
                gap: 8px;
                color: #2e2e2e;
                font-size: 18px;
                white-space: nowrap;
              }

              .account-container svg {
                width: 25px;
                height: 25px;
                display: inline-block;
                vertical-align: middle;
              }

              .btc-amount,
              .lightning-amount {
                color: #2e2e2e;
                font-size: 18px;
                margin-left: 8px;
                white-space: nowrap;
              }

              .close-icon{
                cursor: pointer;
              }
            `
          }
        },
        'data/': {
          'opts.json': {
            raw: opts
          },
        }
      }
    }
  }
}
