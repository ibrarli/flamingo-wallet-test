const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

const receipt_row = require('receipt_row')

module.exports = transaction_receipt

async function transaction_receipt(opts = {}) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb

  const on = {
    style: inject,
    data: ondata,
    icons: iconject,
  }

  let dricons = []

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  shadow.innerHTML = `
    <div class="component-label">Transaction Receipt</div>
    <div class="receipt-card">
      <div class="receipt-header">
        <div class="title-container">
          <div class="receipt-title">Bitcoin Transaction</div>
          <div class="btc-icon-small"></div>
        </div>
        <div class="close-icon"></div>
      </div>
      <div class="receipt-rows"></div>
      <style></style>
    </div>
  `

  const style = shadow.querySelector('style')
  const rows_el = shadow.querySelector('.receipt-rows')

  const subs = await sdb.watch(onbatch)

  for (let i = 0; i < subs.length; i++) {
    const row = await receipt_row(subs[i]) 
    rows_el.append(row)
  }

  return el

  function fail(data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }

  async function onbatch(batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(paths.map(path => drive.get(path).then(file => file.raw)))
      const func = on[type] || fail
      await func(data, type)
    }
  }


  function inject(data) {
    style.textContent = data[0]
  }

  function iconject(data) {
    dricons = data
    const btcIcons = shadow.querySelectorAll('.btc-icon-small')
    const closeIcon = shadow.querySelector('.close-icon')

    btcIcons.forEach(el => el.innerHTML = dricons[0])
    closeIcon.innerHTML = dricons[1]                  
  }

  async function ondata(data) {
    
  }
}

function fallback_module() {
  return {
    api,
    _: {
      'receipt_row': { 
        $: '' 
      }
    }
  }

  function api(opts) {
    
    const receipt_row = {
      mapping: {
        style: 'style',
        data: 'data',
        icons: 'icons'
      }
    }
    opts.value.forEach((row, index) => {
      receipt_row[index] = row
    })

    return {
      drive: {
        'icons/': {
          'btc.svg': { '$ref': 'btc.svg' },
          'x.svg': { '$ref': 'x.svg' }
        },
        'style/': {
          'transaction_receipt.css': { '$ref': 'transaction_receipt.css' }
        },
        'data/': {
          'opts.json': { raw: opts }
        }
      },
      _: { receipt_row }
    }
  }
}
