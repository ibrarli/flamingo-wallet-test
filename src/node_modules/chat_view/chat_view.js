const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

const chat_view_header = require('chat_view_header')
const button = require('button') 

module.exports = chat_view

async function chat_view(opts = {}) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb

  const on = {
    style: inject,
    data: ondata
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  shadow.innerHTML = `
    <div class="component-label">Chat View</div>
    <div class="chat-view-container">
      <div class="chat-view-header"></div>
      <div class="request-button"></div>
    </div>
    <style></style>
  `

  const style = shadow.querySelector('style')

  const header_component = shadow.querySelector('.chat-view-header')
  const request_button_component = shadow.querySelector('.request-button')

  const subs = await sdb.watch(onbatch)

  const header = await chat_view_header(subs[0])
  const request_button = await button(subs[1])

  request_button_component.replaceWith(request_button)  
  header_component.append(header)

  return el

  function fail(data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }

  async function onbatch(batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(paths.map(path => drive.get(path).then(file => file.raw)))
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject(data) {
    style.textContent = data[0]
  }

  async function ondata(data) {
  }
}

function fallback_module() {
  return {
    api,
    _: {
      'chat_view_header': { $: '' },
      'button': { $: '' },
    }
  }

  function api(opts) {

    const chat_view_header = {
      mapping: {
        style: 'style',
        data: 'data',
        icons: 'icons'
      },
      0: opts.value
    }

    const button = {
      mapping: {
        style: 'style',
        data: 'data',
      },
      1: {
        label: 'Request'
      }
    }

    return {
      drive: {
        'style/': {
          'chat_view.css': {
            '$ref': 'chat_view.css'
          }
        },
        'data/': {
          'opts.json': {
            raw: opts
          }
        }
      },
      _: {
        chat_view_header,
        button,
      }
    }
  }
}
