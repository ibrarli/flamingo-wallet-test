const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

const send_button = require('button')
const address_input = require('input_field')
const btc_input_card = require('btc_input_card')

module.exports = send_btc

async function send_btc(opts = {}) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb

  const on = {
    style: inject,
    data: ondata,
    icons: iconject,
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  let dricons = []

  shadow.innerHTML = `
    <div class="send-btc-container">
      <div class="send-btc-header">  
        <div class="title-container"> 
          <div class="send-btc-header">Send BTC</div>
          <div class="btc-icon"></div>
        </div>  
        <div class="x-icon"></div>
      </div>
      <div class="address-input"></div>
      <div class="btc-input-card"></div>
      <div class="send_button"></div>
    </div>
    <style></style>
  `

  const style = shadow.querySelector('style')
  const send_button_component = shadow.querySelector('.send_button')
  const address_input_component = shadow.querySelector('.address-input')
  const btc_input_card_component = shadow.querySelector('.btc-input-card')

  const subs = await sdb.watch(onbatch)

  const button_component = await send_button(subs[0])
  const address_component = await address_input(subs[1])
  const btc_component = await btc_input_card(subs[2])

  send_button_component.append(button_component)
  address_input_component.append(address_component)
  btc_input_card_component.append(btc_component)

  const closeBtn = shadow.querySelector('.x-icon')
  if (closeBtn) {
    closeBtn.onclick = () => {
      const dropdown = el.parentNode
      if (dropdown) {
        dropdown.classList.add('hidden')   
      }
    }
  }

  return el

  function fail(data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }

  async function onbatch(batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(paths.map(path => drive.get(path).then(file => file.raw)))
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject(data) {
    style.textContent = data[0]
  }

  function iconject (data) {
    dricons = data

    const btc_icon = shadow.querySelector('.btc-icon')
    const x_icon = shadow.querySelector('.x-icon')

    btc_icon.innerHTML = dricons[0]
    x_icon.innerHTML = dricons[1]
  }

  async function ondata(data) {
    
  }
}

function fallback_module() {
  return {
    api,
    _: {
      'button': { $: '' },
      'input_field': { $: '' },
      'btc_input_card': { $: '' },
    }
  }

  function api(opts) {
    
    const button = {
      mapping: {
        style: 'style',
        data: 'data',
      },
      0: {
        label: 'Send'
      }    
    }
    
      
    const input_field = {
      mapping: {
        style: 'style',
        data: 'data',
        icons: 'icons'
      },
      1: {
        header: 'Address',
        placeholder: 'Tap to past your address',
        address: 'oiyqwr02816r0175915ijr0912740921u409re2109ru20194',
      }    
    }

    const btc_input_card = {
      mapping: {
        style: 'style',
        data: 'data',
      },
      2: {
        balance: 0.0024, 
      }  
    }

    return {
      drive: {
        'icons/': {
          'btc.svg': {
            '$ref': 'btc.svg'
          },
          'x.svg': {
            '$ref': 'x.svg'
          },
        },
        'style/': {
          'send_btc.css': {
            '$ref': 'send_btc.css'
          }
        },
        'data/': {
          'opts.json': {
            raw: opts
          }
        }
      },
      _: {
        button,
        input_field,
        btc_input_card
      }
    }
  }
}
