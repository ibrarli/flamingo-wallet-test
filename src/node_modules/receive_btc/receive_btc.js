const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

const address_input = require('input_field')
const qr_code = require('qr_code') 

module.exports = receive_btc

async function receive_btc(opts = {}) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb

  const on = {
    style: inject,
    data: ondata,
    icons: iconject,
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  let dricons = []

  shadow.innerHTML = `
    <div class="receive-btc-container">
      <div class="btc-icon"></div> 
      <div class="qr-code"></div> 
      <div class="address-input"></div>
    </div>
    <style></style>
  `

  const style = shadow.querySelector('style')
  const address_input_component = shadow.querySelector('.address-input')
  const qr_code_component = shadow.querySelector('.qr-code')

  const subs = await sdb.watch(onbatch)
  
  const qr_component = await qr_code(subs[0])
  const address_component = await address_input(subs[1])

  address_input_component.append(address_component)
  qr_code_component.append(qr_component)


  return el

  function fail(data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }

  async function onbatch(batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(paths.map(path => drive.get(path).then(file => file.raw)))
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject(data) {
    style.textContent = data[0]
  }

  function iconject(data) {
    dricons = data
    const btc_icon = shadow.querySelector('.btc-icon')
    btc_icon.innerHTML = dricons[0]
  }

  async function ondata(data) {

  }
}


function fallback_module() {
  return {
    api,
    _: {
      'input_field': { $: '' },
      'qr_code': { $: '' },
    }
  }

  function api(opts) {
    const qr_code = {
      mapping: {
        style: 'style',
        data: 'data',
      },
      0: {
        address: '1BoatSLRHtKNngkdXEeobR76b53LETtpyT', 
      }    
    }

    const input_field = {
      mapping: {
        style: 'style',
        data: 'data',
        icons: 'icons'
      },
      1: {
        header: 'Your bitcoin address',
        placeholder: '1BoatSLRHtKNngkdXEeobR76b53LETtpyT',
        address: '1BoatSLRHtKNngkdXEeobR76b53LETtpyT',
        icon: 'apple'
      }    
    }

    return {
      drive: {
        'icons/': {
          'btc.svg': {
            '$ref': 'btc.svg'
          },
        },
        'style/': {
          'receive_btc.css': {
            '$ref': 'receive_btc.css'
          }
        },
        'data/': {
          'opts.json': {
            raw: opts
          }
        }
      },
      _: {
        qr_code,
        input_field
      }
    }
  }
}
