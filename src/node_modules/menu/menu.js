const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

module.exports = menu

async function menu (opts = {}) {
  const { id, sdb } = await get(opts.sid)
  const { drive } = sdb

  const on = {
    style: inject,
    data: ondata,
    icons: iconject,
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  let dricons = []

  shadow.innerHTML = `
    <div class="menu-container"></div>
    <style></style>
  `
  const style = shadow.querySelector('style')
  const footer = shadow.querySelector('.menu-container')

  await sdb.watch(onbatch)
  return el

  async function onbatch (batch) {
    for (const { type, paths } of batch) {
      const data = await Promise.all(
        paths.map(path => drive.get(path).then(file => file.raw))
      )
      const func = on[type] || fail
      await func(data, type)
    }
  }

  function inject (data) {
    style.textContent = data[0]
  }

  async function ondata (data) {

    footer.innerHTML = `
      <div class="tab-container">
        <div class="icon">${dricons[0]}</div>   
        <div class="label">Home</div>
      </div>
      <div class="tab-container">
        <div class="icon">${dricons[1]}</div>   
        <div class="label">Contacts</div>
      </div>
      <div class="tab-container">
        <div class="icon">${dricons[2]}</div>   
        <div class="label">Details</div>
      </div>
      <div class="tab-container">
        <div class="icon">${dricons[3]}</div>   
        <div class="label">More</div>
      </div>
` 
  }

  function fail (data, type) {
    throw new Error('invalid message', { cause: { data, type } })
  }

  function iconject (data) {
    dricons = data
  }

}

function fallback_module () {
  return {
    api: fallback_instance
  }

  function fallback_instance (opts) {
    return {
      drive: {
        'icons/': {
          'home.svg':{
            '$ref': 'home.svg'
          },
          'contacts.svg': {
            '$ref': 'contacts.svg'
          },
          'details.svg': {
            '$ref': 'details.svg'
          },
          'more.svg': {
            '$ref': 'more.svg'
          },
        },
        'style/': {
          'style.css': {
            raw: `
                .menu-container {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    background: #fff;
                    border: 1px solid #ccc;
                    border-radius: 12px;
                    padding: 10px;
                    width: 100%;
                    margin: 0 auto;
                    font-family: Arial, sans-serif;
                    box-sizing: border-box; 
                }

                .tab-container {
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    gap: 4px;
                    cursor: pointer;
                    flex: 1;
                }

                .tab-container .icon {
                    width: 24px;
                    height: 24px;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                }

                .tab-container .label {
                    font-size: 12px;
                }

                /* Active (Home) */
                .tab-container:first-child .icon,
                .tab-container:first-child .label {
                    color: #000;
                    fill: #000; /* in case icons are SVG */
                    font-weight: 600;
                }

                /* Inactive (others) */
                .tab-container:not(:first-child) .icon,
                .tab-container:not(:first-child) .label {
                    color: #888;
                    fill: #888;
                }
            `
          }
        },
        'data/': {
          'opts.json': {
            raw: opts
          }
        }
      }
    }
  }
}
