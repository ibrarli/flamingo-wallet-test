const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

module.exports = total_wealth

async function get_rate(from = 'btc', to = 'usd') {
  let cached_rate = null
  if (cached_rate) return cached_rate
  
  const rate = Number(await (await fetch(`https://api.price2sheet.com/raw/${from}/${to}`)).text())

  if (!isNaN(rate) && rate > 0) {
    cached_rate = rate
    console.log("api is working")
  } else {
    console.log("api is returning null value")
  }

  return cached_rate
}

async function total_wealth (opts = {}, protocol) {
  const { id, sdb } = await get(opts.sid)
  const {drive} = sdb

  const on = {
    style: inject,
    data: ondata,
    icons: iconject,
  }
  
  const el = document.createElement('div')
  const shadow =  el.attachShadow({ mode: 'closed' })

  let dricons = []

  shadow.innerHTML = `
    <div class="total-wealth-container">
      <div class="total-wealth-header">Total wealth</div>
      <div class="total-wealth-value">
        <span>₿ 0.0000</span>
        <div class="total-wealth-usd">= $0</div>
      </div>
      <div class="wallet-row">
        <div class="lightning-icon"></div>
        Lightning Wallet <span>0.0000</span>
      </div>
      <div class="wallet-row">
        <div class="btc-icon"></div>
        Bitcoin Wallet <span>0.0000</span>
      </div>
    </div>
    <style></style>
  `

  const style = shadow.querySelector('style')
  
  await sdb.watch(onbatch)

  return el

  function fail(data, type) { throw new Error('invalid message', { cause: { data, type } }) }

  async function onbatch (batch) {
    for (const { type, paths } of batch){
      const data = await Promise.all(paths.map(path => drive.get(path).then(file => file.raw)))
      const func = on[type] || fail
      func(data, type)
    }
  }

  function inject (data) {
    style.textContent = data[0]

  }

  function ondata(data) {
    renderValues(data[0]?.value || {})
  }
  

  async function renderValues({ total = 0, lightning = 0, bitcoin = 0 }) {
    const rate = await get_rate('btc', 'usd')
    const usd = rate * total

    shadow.querySelector('.total-wealth-value span').textContent = `₿ ${total.toFixed(4)}`
    shadow.querySelector('.total-wealth-usd').textContent = `= $${usd.toLocaleString(undefined, {maximumFractionDigits: 2})}`
    shadow.querySelectorAll('.wallet-row')[0].querySelector('span').textContent = lightning.toFixed(4)
    shadow.querySelectorAll('.wallet-row')[1].querySelector('span').textContent = bitcoin.toFixed(4)
    
    if (dricons.length) {
      shadow.querySelector('.btc-icon').innerHTML = dricons[0]  // btc.svg
      shadow.querySelector('.lightning-icon').innerHTML = dricons[1] // lightning.svg
    }
  }

  function iconject (data) {
    dricons = data
  }
}

// ============ Fallback Setup for STATE ============

function fallback_module () {
  return {
    api: fallback_instance
  }

  function fallback_instance (opts = {}) {
    return {
      drive: {
        'icons/':{
          'btc.svg':{
            '$ref': 'btc.svg'
          },
          'lightning.svg':{
            '$ref': 'lightning.svg'
          }
        },
        'style/': {
          'total_wealth.css': {
           '$ref':'total_wealth.css'
          }
        },
        'data/': {
          'opts.json': {
            raw: opts
          }
        }
      }
    }
  }
}